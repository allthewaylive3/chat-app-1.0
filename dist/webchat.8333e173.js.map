{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,MCI8B,EAE1B,EAEA,EA+dJ,IAAM,EAAmB,CAAC,EAAS,EAAW,EAAS,CAAA,CAAK,CAAE,EAAoB,CAAA,CAAK,CAAE,EAAiB,CAAkB,QAvCpH,EAwCJ,IAAM,EAAS,SAAS,aAAa,CAAC,MACtC,EAAO,SAAS,CAAC,GAAG,CAAC,gBAAiB,GAEtC,IAAM,EAAa,SAAS,aAAa,CAAC,KAGtC,EAAmB,EAAS,EAtCrB,AAJA,AAJI,AA8CiD,EA9CpC,OAAO,CADf,iBAC6B,uBAI7B,OAAO,CADN,2DACqB,0GAItB,OAAO,CADP,kCACqB,uCAyCzC,GAFA,EAAW,SAAS,CAAG,EAEnB,AAAc,aAAd,EAA0B,CAE1B,IAAM,EAAY,SAAS,aAAa,CAAC,MACzC,CAAA,EAAU,GAAG,CAAG,EAChB,EAAU,SAAS,CAAC,GAAG,CAAC,6BACxB,EAAO,WAAW,CAAC,EACvB,CAEA,EAAO,WAAW,CAAC,GACnB,EAAQ,WAAW,CAAC,GACpB,EAAQ,QAAQ,CAAC,EAAG,EAAQ,YAAY,CAC5C,EAuLA,SAAS,IAML,IAAI,EAAY,SAAS,cAAc,CAAC,cACpC,EAAc,SAAS,aAAa,CAAC,yBACrC,EAAiB,SAAS,aAAa,CAAC,6BASxC,EAAc,CAAA,EAqElB,SAAS,IAIL,EAAU,KAAK,CAAC,OAAO,CAAG,EAC1B,EAAU,KAAK,CAAC,UAAU,CAAG,SAC7B,eAAe,OAAO,CAAC,cAAe,OAC1C,CAzEA,OAAO,gBAAgB,CAAC,SAAU,WAI1B,OAAO,WAAW,CAAG,KAAO,CAAC,IAI7B,EAAc,CAAA,EACd,WAAW,WACF,eAAe,OAAO,CAAC,iBAIxB,EAAU,KAAK,CAAC,OAAO,CAAG,EAC1B,EAAU,KAAK,CAAC,UAAU,CAAG,UAMrC,EAAG,KAEX,GAGI,GAIA,EAAY,gBAAgB,CAAC,QAAS,GAQtC,GAIA,EAAe,gBAAgB,CAAC,QAAS,GAQzC,GACA,EAAU,gBAAgB,CAAC,QAAS,WA5UxC,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,yBAG3B,CAAC,eAAe,OAAO,CAAC,aAAe,SAAS,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,0BACxE,AA5RR,eATQ,EAUJ,IAAM,EAAuB,SAAS,cAAc,CAAC,wBAAwB,KAAK,CAC5E,EAAkB,SAAS,cAAc,CAAC,mBAAmB,KAAK,CAClE,EAAiB,OAAO,QAAQ,CAAC,QAAQ,CAiB/C,MAAM,qDAAsD,CACxD,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAjBgB,KAAK,SAAS,CAAC,CAC/B,MAAA,GAlBA,EAAY,eAAe,OAAO,CAAC,gBAEnC,EAAY,KAAK,EAAE,GACnB,eAAe,OAAO,CAAC,YAAa,IAEjC,GAcH,YAAa,EACb,OAAQ,EACR,SAAU,CACd,EAaA,GACC,IAAI,CAAC,AAAA,GAAY,EAAS,IAAI,IAC9B,IAAI,CAAC,AAAA,IACE,EAAK,OAAO,EAAI,EAAK,IAAI,EAAI,EAAK,IAAI,CAAC,QAAQ,EAE/C,eAAe,OAAO,CAAC,WAAY,EAAK,IAAI,CAAC,QAAQ,CAK7D,GACC,KAAK,CAAC,AAAA,GAAS,QAAQ,KAAK,CAAC,yBAA0B,GAC5D,IA0PQ,CAAC,SAAS,aAAa,CAAC,gCAAkC,GAC1D,WAAW,KACP,EAAiB,EAAiB,WAAY,CAAA,EAAO,EACzD,EAAG,KAuUC,GACJ,EAgBR,CAEI,AAAwB,YAAxB,SAAS,UAAU,CACnB,SAAS,gBAAgB,CAAC,mBAAoB,GAE9C,G","sources":["<anon>","webchat.js"],"sourcesContent":["(() => {\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire1352\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"k19Rm\", function(module, exports) {\n// Defines the Verbose flag\nconst $e92b8c976482afe3$var$isVerbose = false; // Set to false to silence console.log statements\n// Global Variables\nlet $e92b8c976482afe3$var$chatbotToggler, $e92b8c976482afe3$var$closeBtn, $e92b8c976482afe3$var$chatbox, $e92b8c976482afe3$var$chatInput, $e92b8c976482afe3$var$sendChatBtn;\nlet $e92b8c976482afe3$var$userMessage = null;\nlet $e92b8c976482afe3$var$chatbotAvatarImage;\nlet $e92b8c976482afe3$var$inputInitHeight;\nlet $e92b8c976482afe3$var$chatbotGreeting;\nfunction $e92b8c976482afe3$var$getRandomDelay(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n// Function to calculate a dynamic delay based on the length of the response\nfunction $e92b8c976482afe3$var$getRandomDelayBasedOnLength(responseLength, minPerChar = 150, minDelay = 3000, maxDelay = 10000) {\n    let calculatedDelay = responseLength * minPerChar;\n    return Math.min(Math.max(calculatedDelay, minDelay), maxDelay);\n}\n// Function to retrieve and set the encryptedDataPayload\nfunction $e92b8c976482afe3$var$setEncryptedDataPayload() {\n    // Find the script tag with the 'data-payload' attribute\n    const scriptTag = document.querySelector(\"script[data-payload]\");\n    if (scriptTag) {\n        const encryptedDataPayload = scriptTag.getAttribute(\"data-payload\");\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Encrypted Data Payload from script tag:\", encryptedDataPayload);\n        const encryptedDataInput = document.getElementById(\"encryptedDataPayload\");\n        if (encryptedDataInput) {\n            encryptedDataInput.value = encryptedDataPayload;\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"Set encryptedDataPayload value in input field:\", encryptedDataInput.value);\n        } else console.error(\"Failed to set encryptedDataPayload. Input field missing.\");\n    } else console.error(\"Failed to find script tag with 'data-payload' attribute.\");\n}\n// Function to retrieve and set the encryptedDataId\nfunction $e92b8c976482afe3$var$setEncryptedDataId() {\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"setEncryptedDataId function called\");\n    // Find the script tag with the 'data-id' attribute\n    const scriptTag = document.querySelector(\"script[data-id]\");\n    if (scriptTag) {\n        const encryptedDataId = scriptTag.getAttribute(\"data-id\");\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Encrypted Data ID from script tag:\", encryptedDataId); //im not seeing this log \n        // Assuming you have an input or a hidden field in your HTML to store the encryptedDataId\n        const encryptedDataIdInput = document.getElementById(\"encryptedDataId\");\n        if (encryptedDataIdInput) {\n            encryptedDataIdInput.value = encryptedDataId;\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"Set encryptedDataId value in input field:\", encryptedDataIdInput.value);\n        } else console.error(\"Failed to set encryptedDataId. Input field missing.\");\n    } else console.error(\"Failed to find script tag with 'data-id' attribute.\");\n     //no console log is showing in this function\n}\n// Function to activate the chatbot\nfunction $e92b8c976482afe3$var$activateChatbot() {\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Starting chatbot activation process.\");\n    const encryptedDataPayload = document.getElementById(\"encryptedDataPayload\").value;\n    const encryptedDataId = document.getElementById(\"encryptedDataId\").value; // Make sure this variable is correctly capturing the value\n    const clientHostname = window.location.hostname;\n    //const clientHostname = \"localhost\";\n    // Debugging: Log the values before sending\n    if ($e92b8c976482afe3$var$isVerbose) {\n        console.log(\"encryptedDataPayload:\", encryptedDataPayload);\n        console.log(\"encryptedDataId:\", encryptedDataId);\n        console.log(\"clientHostname:\", clientHostname);\n    }\n    // Construct the request body\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname\n    });\n    // Debugging: Log the request body\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Sending request body:\", requestBody);\n    fetch(\"https://next.leads-mania.com/webchat/activate-chatbot\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: requestBody\n    }).then((response)=>response.json()).then((data)=>{\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Chatbot activated:\", data);\n        if (data.success) {\n            localStorage.setItem(\"isActivated\", \"true\");\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"Updated activation status in localStorage after successful activation.\");\n        }\n    }).catch((error)=>console.error(\"Error activating chatbot:\", error));\n}\n// Function to initialize chatbot (fetch configuration, check activation)\nasync function $e92b8c976482afe3$var$initializeChatbot() {\n    await $e92b8c976482afe3$var$fetchAndUpdateChatConfig(); // Fetch and update chat configuration\n    $e92b8c976482afe3$var$setEncryptedDataId(); // Set encrypted data ID\n    $e92b8c976482afe3$var$checkActivationStatus(); // Check activation status\n}\n// Function to get or create a new user session ID\nfunction $e92b8c976482afe3$var$getSessionId() {\n    let sessionId = sessionStorage.getItem(\"sessionId\");\n    if (!sessionId) {\n        sessionId = uuid.v4(); // Generate a new UUID\n        sessionStorage.setItem(\"sessionId\", sessionId);\n    }\n    return sessionId;\n}\n// Function to create a thread\nfunction $e92b8c976482afe3$var$createThread() {\n    const encryptedDataPayload = document.getElementById(\"encryptedDataPayload\").value;\n    const encryptedDataId = document.getElementById(\"encryptedDataId\").value;\n    const clientHostname = window.location.hostname;\n    //const clientHostname = \"localhost\";\n    const userId = $e92b8c976482afe3$var$getSessionId(); // Get the current session ID or generate a new one\n    // Construct the request body\n    const requestBody = JSON.stringify({\n        userId: userId,\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname\n    });\n    // Debugging: Log the request body\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Sending request createThread:\", requestBody);\n    fetch(\"https://next.leads-mania.com/webchat/create-thread\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: requestBody\n    }).then((response)=>response.json()).then((data)=>{\n        if (data.success && data.data && data.data.threadID) // Store the thread ID in sessionStorage\n        sessionStorage.setItem(\"threadId\", data.data.threadID);\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Thread created:\", data);\n    }).catch((error)=>console.error(\"Error creating thread:\", error));\n}\n// Function to create a message\nasync function $e92b8c976482afe3$var$createMessage(encryptedDataPayload, encryptedDataId, clientHostname, threadId, lastUtterance) {\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"createMessage - Sending request with:\", {\n        encryptedDataPayload: encryptedDataPayload,\n        encryptedDataId: encryptedDataId,\n        clientHostname: clientHostname,\n        threadId: threadId,\n        lastUtterance: lastUtterance\n    });\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname,\n        threadId: threadId,\n        lastUtterance: lastUtterance\n    });\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Sending request body for createMessage:\", requestBody);\n    const response = await fetch(\"https://next.leads-mania.com/webchat/create-message\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: requestBody\n    });\n    const data = await response.json();\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"createMessage - Response received:\", data);\n    if (!response.ok) throw new Error(data.message || \"Failed to create message\");\n    return data;\n}\n// Function to create a run\nasync function $e92b8c976482afe3$var$createRun(encryptedDataPayload, encryptedDataId, clientHostname, threadId) {\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname,\n        threadId: threadId\n    });\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Sending request body for createRun:\", requestBody);\n    try {\n        const response = await fetch(\"https://next.leads-mania.com/webchat/create-run\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: requestBody\n        });\n        const data = await response.json();\n        if (response.ok && data.success) {\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"Run created:\", data);\n            const runId = data.data.runID; // Accessing the runID correctly\n            sessionStorage.setItem(\"runId\", runId);\n            return runId;\n        } else {\n            console.error(\"Failed to create run:\", data.message);\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error creating run:\", error);\n        return null;\n    }\n}\n// Function to poll the status of a run\nasync function $e92b8c976482afe3$var$pollRunStatus(encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId) {\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"pollRunStatus - Sending request with:\", {\n        encryptedDataPayload: encryptedDataPayload,\n        encryptedDataId: encryptedDataId,\n        clientHostname: clientHostname,\n        threadId: threadId,\n        runId: runId\n    });\n    // Construct the request body\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname,\n        threadId: threadId,\n        runId: runId\n    });\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Sending request body for pollRunStatus:\", requestBody);\n    try {\n        const response = await fetch(\"https://next.leads-mania.com/webchat/poll-status\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: requestBody\n        });\n        const data = await response.json();\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"pollRunStatus - Response received:\", data);\n        if (!response.ok) throw new Error(data.message || \"Failed to poll run status.\");\n        // Check if data contains status and return it\n        if (data.success && data.data && data.data.status) {\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"Run status:\", data.data.status);\n            return data.data.status; // Return the status of the run\n        } else {\n            console.error(\"Failed to poll run status:\", data.message);\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error polling run status:\", error);\n        return null; // Return null in case of an error\n    }\n}\n// Function to return the response from the assistant\nasync function $e92b8c976482afe3$var$getAssistantResponse(encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId) {\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"getAssistantResponse called with:\", {\n        encryptedDataPayload: encryptedDataPayload,\n        encryptedDataId: encryptedDataId,\n        clientHostname: clientHostname,\n        threadId: threadId,\n        runId: runId\n    });\n    // Construct the request body\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname,\n        threadId: threadId,\n        runId: runId\n    });\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Sending request body for getAssistantResponse:\", requestBody);\n    try {\n        const response = await fetch(\"https://next.leads-mania.com/webchat/get-assistant-response\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: requestBody\n        });\n        const data = await response.json();\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"getAssistantResponse - Response data:\", data);\n        if (!response.ok) throw new Error(data.message || \"Failed to get assistant response.\");\n        // Correctly extract the assistant's reply\n        const assistantReply = data.data.assistantReply;\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"getAssistantResponse - Assistant reply:\", assistantReply);\n        return assistantReply; // Return the assistant's response\n    } catch (error) {\n        console.error(\"Error getting assistant response:\", error);\n        return null; // Return null in case of an error\n    }\n}\n// Function to fetch and update chat configuration\nasync function $e92b8c976482afe3$var$fetchAndUpdateChatConfig() {\n    const encryptedDataPayload = document.getElementById(\"encryptedDataPayload\").value;\n    const sessionStorageKey = `chatConfig-${encryptedDataPayload}`;\n    if (!sessionStorage.getItem(sessionStorageKey)) {\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Fetching chat configuration from server.\");\n        const response = await fetch(\"https://next.leads-mania.com/webchat/get-chat-config\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                dataPayload: encryptedDataPayload\n            })\n        });\n        const chatConfig = await response.json();\n        if (response.ok) {\n            sessionStorage.setItem(sessionStorageKey, JSON.stringify(chatConfig));\n            $e92b8c976482afe3$var$updateChatUI(chatConfig);\n        } else console.error(\"Failed to fetch chat configuration:\", chatConfig.message);\n    } else {\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Using stored chat configuration from sessionStorage.\");\n        const chatConfig = JSON.parse(sessionStorage.getItem(sessionStorageKey));\n        $e92b8c976482afe3$var$updateChatUI(chatConfig);\n    }\n}\n// Function to open the lightbox modal\nfunction $e92b8c976482afe3$var$openLightboxModal(src) {\n    // console.log(\"Opening lightbox modal with image:\", src);\n    const modal = document.querySelector(\".x1z2Chat-lightbox-modal\");\n    const modalImg = modal.querySelector(\".x1z2Chat-lightbox-content\");\n    modalImg.src = src;\n    modal.style.display = \"block\";\n    // Close modal when clicking on the close button or anywhere outside the image\n    modal.addEventListener(\"click\", function(event) {\n        if (event.target === modal || event.target.className === \"x1z2Chat-close-lightbox\") {\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"Closing lightbox modal.\");\n            modal.style.display = \"none\";\n        }\n    });\n}\n// Function to handle chatbot toggle\nfunction $e92b8c976482afe3$var$toggleChatbot() {\n    document.body.classList.toggle(\"x1z2Chat-show-chatbot\");\n    // Create a thread only if no thread exists and the chatbot is being opened\n    if (!sessionStorage.getItem(\"threadId\") && document.body.classList.contains(\"x1z2Chat-show-chatbot\")) $e92b8c976482afe3$var$createThread();\n    // Send the initial greeting if it hasn't been sent yet\n    if (!document.querySelector(\".x1z2Chat-chatbox .incoming\") && $e92b8c976482afe3$var$chatbotGreeting) setTimeout(()=>{\n        $e92b8c976482afe3$var$addMessageToChat($e92b8c976482afe3$var$chatbotGreeting, \"incoming\", false, $e92b8c976482afe3$var$chatbotAvatarImage);\n    }, 1000);\n}\nfunction $e92b8c976482afe3$var$convertMarkdownToHtml(markdownText) {\n    // Convert bold text\n    const boldPattern = /\\*\\*(.*?)\\*\\*/g;\n    let htmlText = markdownText.replace(boldPattern, \"<strong>$1</strong>\");\n    // Convert image links (Markdown syntax)\n    const imagePattern = /!\\[(.*?)\\]\\((https?:\\/\\/\\S+(?:jpg|jpeg|png|gif|bmp))\\)/gi;\n    htmlText = htmlText.replace(imagePattern, '<a href=\"$2\" class=\"x1z2Chat-image-link\" target=\"_blank\"><img src=\"$2\" alt=\"$1\" class=\"thumbnail\"></a>');\n    // Convert regular links (Markdown syntax)\n    const linkPattern = /\\[(.*?)\\]\\((https?:\\/\\/\\S+)\\)/gi;\n    htmlText = htmlText.replace(linkPattern, '<a href=\"$2\" target=\"_blank\">$1</a>');\n    return htmlText;\n}\n// Function to show typing indicator in chat\nfunction $e92b8c976482afe3$var$showTypingIndicator() {\n    // console.log(\"Showing typing indicator...\");\n    const typingIndicator = document.createElement(\"div\");\n    typingIndicator.classList.add(\"x1z2Chat-typing\");\n    // Create three span elements for the dots\n    for(let i = 0; i < 3; i++){\n        const dot = document.createElement(\"span\");\n        typingIndicator.appendChild(dot);\n    }\n    $e92b8c976482afe3$var$chatbox.appendChild(typingIndicator);\n    $e92b8c976482afe3$var$chatbox.scrollTo(0, $e92b8c976482afe3$var$chatbox.scrollHeight);\n}\n// Function to remove the typing indicator\nfunction $e92b8c976482afe3$var$removeTypingIndicator() {\n    // console.log(\"Removing typing indicator...\");\n    const typingIndicator = document.querySelector(\".x1z2Chat-typing\");\n    if (typingIndicator) typingIndicator.remove();\n}\n// Function to add messages to chat\nconst $e92b8c976482afe3$var$addMessageToChat = (message, className, isHtml = false, isTypingIndicator = false, avatarImageUrl = $e92b8c976482afe3$var$chatbotAvatarImage)=>{\n    const chatLi = document.createElement(\"li\");\n    chatLi.classList.add(\"x1z2Chat-chat\", className);\n    const chatBubble = document.createElement(\"p\");\n    // chatBubble.classList.add(\"x1z2Chat-chat-bubble\");\n    let convertedMessage = isHtml ? message : $e92b8c976482afe3$var$convertMarkdownToHtml(message);\n    chatBubble.innerHTML = convertedMessage;\n    if (className === \"incoming\") {\n        // For incoming messages, include the avatar image\n        const avatarImg = document.createElement(\"img\");\n        avatarImg.src = avatarImageUrl;\n        avatarImg.classList.add(\"x1z2Chat-assistant-avatar\");\n        chatLi.appendChild(avatarImg);\n    }\n    chatLi.appendChild(chatBubble);\n    $e92b8c976482afe3$var$chatbox.appendChild(chatLi);\n    $e92b8c976482afe3$var$chatbox.scrollTo(0, $e92b8c976482afe3$var$chatbox.scrollHeight);\n};\n// Function to update UI with chat configuration data\nfunction $e92b8c976482afe3$var$updateChatUI(chatConfig) {\n    $e92b8c976482afe3$var$chatbotGreeting = chatConfig.greeting_message;\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Updating chat UI with configuration:\", chatConfig);\n    // Update the primary color\n    if (chatConfig.colorTheme) document.documentElement.style.setProperty(\"--primary-color\", chatConfig.colorTheme);\n    document.querySelector(\".x1z2Chat-chatbot-logo\").src = chatConfig.company_image;\n    document.querySelector(\".x1z2Chat-chatbot-heading-text\").textContent = chatConfig.heading_text;\n    document.querySelector(\".x1z2Chat-online-status\").textContent = chatConfig.subheading_text;\n    $e92b8c976482afe3$var$chatbotAvatarImage = chatConfig.avatar_image;\n    document.querySelector(\".x1z2Chat-popup-assistant-avatar\").src = chatConfig.popup_image;\n    document.querySelector(\".x1z2Chat-popup-message\").textContent = chatConfig.popup_message;\n    // Store activation status\n    localStorage.setItem(\"isActivated\", chatConfig.is_activated);\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Stored activation status:\", chatConfig.is_activated);\n}\n// Function to check activation status\nfunction $e92b8c976482afe3$var$checkActivationStatus() {\n    const isActivated = localStorage.getItem(\"isActivated\");\n    console.log(\"Checking activation status:\", isActivated);\n    // Convert the retrieved value to a boolean for accurate comparison\n    const isActivatedBool = isActivated === \"1\";\n    if (!isActivatedBool) {\n        console.log(\"Activating chat as it is not yet activated.\");\n        // Activation has not been done or is not marked as activated\n        $e92b8c976482afe3$var$activateChatbot();\n    } else console.log(\"Chat is already activated.\");\n}\n// Process the user message by creating a run, polling the status, and getting the response\nasync function $e92b8c976482afe3$var$processUserMessage(message) {\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"processUserMessage - Received message:\", message);\n    try {\n        // Retrieve encrypted data and hostname from the DOM elements\n        const encryptedDataPayload = document.getElementById(\"encryptedDataPayload\").value;\n        const encryptedDataId = document.getElementById(\"encryptedDataId\").value;\n        const clientHostname = document.location.hostname; // Dynamically get the hostname\n        // const clientHostname = \"localhost\"; // Dynamically get the hostname\n        const threadId = sessionStorage.getItem(\"threadId\"); // Assuming threadId is stored in sessionStorage\n        // Step 1: Create a message\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"processUserMessage - Creating message with:\", message);\n        await $e92b8c976482afe3$var$createMessage(encryptedDataPayload, encryptedDataId, clientHostname, threadId, message); // Adjust parameters as per the latest function signature\n        // Step 2: Create a run\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"processUserMessage - Creating run.\");\n        const runId = await $e92b8c976482afe3$var$createRun(encryptedDataPayload, encryptedDataId, clientHostname, threadId); // Adjust parameters as per the latest function signature\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"processUserMessage - Run created with ID:\", runId);\n        // Step 3: Poll for the status of the run\n        let runStatus;\n        do {\n            runStatus = await $e92b8c976482afe3$var$pollRunStatus(encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId); // Adjust parameters as per the latest function signature\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"Polling run status:\", runStatus);\n            await new Promise((resolve)=>setTimeout(resolve, 2000)); // Wait for 2 seconds before polling again\n        }while (runStatus !== \"completed\");\n        // Step 4: Get the assistant's response\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"processUserMessage - Getting assistant's response.\");\n        const assistantResponse = await $e92b8c976482afe3$var$getAssistantResponse(encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId); // Adjust parameters as per the latest function signature\n        // Display the assistant's response\n        if (assistantResponse) {\n            $e92b8c976482afe3$var$addMessageToChat(assistantResponse, \"incoming\");\n            $e92b8c976482afe3$var$removeTypingIndicator(); // Remove typing indicator as soon as the response is displayed\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"processUserMessage - Assistant response:\", assistantResponse);\n        }\n    } catch (error) {\n        console.error(\"Error processing user message:\", error);\n    }\n}\n// Handle chat function\nconst $e92b8c976482afe3$var$handleChat = async (message)=>{\n    if (!message) {\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"handleChat - No message entered. Exiting.\");\n        return;\n    }\n    // Add the user message to the chat as an outgoing message\n    $e92b8c976482afe3$var$addMessageToChat(message, \"outgoing\");\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"handleChat - Message added to chat:\", message);\n    // Clear the chat input field\n    $e92b8c976482afe3$var$chatInput.value = \"\";\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"handleChat - Chat input cleared\");\n    // Generate a random initial delay for showing the typing indicator\n    const initialTypingDelay = $e92b8c976482afe3$var$getRandomDelay(4000, 5000);\n    setTimeout(async ()=>{\n        // Show typing indicator after the initialTypingDelay\n        $e92b8c976482afe3$var$showTypingIndicator();\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"handleChat - Showing typing indicator.\");\n        // Retrieve necessary data\n        const encryptedDataPayload = document.getElementById(\"encryptedDataPayload\").value;\n        const threadId = sessionStorage.getItem(\"threadId\");\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"handleChat - encryptedDataPayload and threadId:\", encryptedDataPayload, threadId);\n        try {\n            // Process the user message\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"handleChat - Calling processUserMessage with:\", message);\n            await $e92b8c976482afe3$var$processUserMessage(message, encryptedDataPayload, threadId);\n        } catch (error) {\n            console.error(\"Error processing user message:\", error);\n        }\n    // The typing indicator will be removed inside processUserMessage after receiving the assistant's response\n    }, initialTypingDelay);\n};\nfunction $e92b8c976482afe3$var$setupEventListeners() {\n    $e92b8c976482afe3$var$chatbotToggler.addEventListener(\"click\", $e92b8c976482afe3$var$toggleChatbot);\n    $e92b8c976482afe3$var$sendChatBtn.addEventListener(\"click\", ()=>{\n        $e92b8c976482afe3$var$handleChat($e92b8c976482afe3$var$chatInput.value.trim());\n    });\n    $e92b8c976482afe3$var$chatInput.addEventListener(\"keypress\", function(event) {\n        if (event.key === \"Enter\" && !event.shiftKey) {\n            event.preventDefault(); // Prevent the default action (i.e., inserting a newline)\n            $e92b8c976482afe3$var$handleChat($e92b8c976482afe3$var$chatInput.value.trim()); // Call the handleChat function with the trimmed message\n        }\n    });\n    // Event listener for thumbnails\n    $e92b8c976482afe3$var$chatbox.addEventListener(\"click\", function(event) {\n        if (event.target.classList.contains(\"x1z2Chat-image-link\") || event.target.classList.contains(\"thumbnail\")) {\n            event.preventDefault();\n            let imgSrc = event.target.href || event.target.src;\n            $e92b8c976482afe3$var$openLightboxModal(imgSrc);\n        }\n    });\n// Add event listeners to other queried DOM elements as needed\n}\nif ($e92b8c976482afe3$var$isVerbose) console.log(\"Script loaded\");\nfunction $e92b8c976482afe3$var$onDomContentLoaded() {\n    if ($e92b8c976482afe3$var$isVerbose) console.log(\"DOMContentLoaded event triggered or DOM already loaded\");\n    // Get references to the chat popup, close button, and chatbot toggler\n    var chatPopup = document.getElementById(\"chat-popup\");\n    var closeButton = document.querySelector(\".x1z2Chat-close-popup\");\n    var chatbotToggler = document.querySelector(\".x1z2Chat-chatbot-toggler\");\n    if ($e92b8c976482afe3$var$isVerbose) {\n        console.log(\"chatPopup:\", chatPopup);\n        console.log(\"closeButton:\", closeButton);\n        console.log(\"chatbotToggler:\", chatbotToggler);\n    }\n    // Variable to track if the user has scrolled past a certain point\n    var hasScrolled = false;\n    // Add scroll event listener\n    window.addEventListener(\"scroll\", function() {\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Scroll event triggered, pageYOffset:\", window.pageYOffset);\n        if (window.pageYOffset > 300 && !hasScrolled) {\n            if ($e92b8c976482afe3$var$isVerbose) console.log(\"User scrolled more than 300px, showing popup\");\n            hasScrolled = true;\n            setTimeout(function() {\n                if (!sessionStorage.getItem(\"popupClosed\")) {\n                    if ($e92b8c976482afe3$var$isVerbose) console.log(\"Showing popup\");\n                    chatPopup.style.opacity = 1;\n                    chatPopup.style.visibility = \"visible\";\n                } else if ($e92b8c976482afe3$var$isVerbose) console.log(\"Popup previously closed, not showing\");\n            }, 4000);\n        }\n    });\n    // Add click event listener to the close button\n    if (closeButton) {\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Adding click listener to closeButton\");\n        closeButton.addEventListener(\"click\", closePopup);\n    } else if ($e92b8c976482afe3$var$isVerbose) console.log(\"closeButton not found\");\n    // Add click event listener to the chatbot toggler\n    if (chatbotToggler) {\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Adding click listener to chatbotToggler\");\n        chatbotToggler.addEventListener(\"click\", closePopup);\n    } else if ($e92b8c976482afe3$var$isVerbose) console.log(\"chatbotToggler not found\");\n    // Add click event listener to the chat popup\n    if (chatPopup) chatPopup.addEventListener(\"click\", function() {\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Chat popup clicked, toggling chatbot\");\n        $e92b8c976482afe3$var$toggleChatbot();\n        // Optionally, close the popup when the chatbot is opened\n        closePopup();\n    });\n    else if ($e92b8c976482afe3$var$isVerbose) console.log(\"chatPopup not found\");\n    // Function to close the popup\n    function closePopup() {\n        if ($e92b8c976482afe3$var$isVerbose) console.log(\"Closing popup\");\n        chatPopup.style.opacity = 0;\n        chatPopup.style.visibility = \"hidden\";\n        sessionStorage.setItem(\"popupClosed\", \"true\");\n    }\n}\nif (document.readyState === \"loading\") document.addEventListener(\"DOMContentLoaded\", $e92b8c976482afe3$var$onDomContentLoaded);\nelse $e92b8c976482afe3$var$onDomContentLoaded();\n\n});\n\n})();\n//# sourceMappingURL=webchat.8333e173.js.map\n","// Defines the Verbose flag\nconst isVerbose = false; // Set to false to silence console.log statements\n\n// Global Variables\nlet chatbotToggler, closeBtn, chatbox, chatInput, sendChatBtn;\nlet userMessage = null;\nlet chatbotAvatarImage;\nlet inputInitHeight;\nlet chatbotGreeting;\n\nfunction getRandomDelay(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Function to calculate a dynamic delay based on the length of the response\nfunction getRandomDelayBasedOnLength(responseLength, minPerChar = 150, minDelay = 3000, maxDelay = 10000) {\n    let calculatedDelay = responseLength * minPerChar;\n    return Math.min(Math.max(calculatedDelay, minDelay), maxDelay);\n}\n\n// Function to retrieve and set the encryptedDataPayload\nfunction setEncryptedDataPayload() {\n    // Find the script tag with the 'data-payload' attribute\n    const scriptTag = document.querySelector('script[data-payload]');\n    \n    if (scriptTag) {\n        const encryptedDataPayload = scriptTag.getAttribute('data-payload');\n\n        if (isVerbose) {\n        console.log(\"Encrypted Data Payload from script tag:\", encryptedDataPayload);\n        }\n        \n        const encryptedDataInput = document.getElementById('encryptedDataPayload');\n        if (encryptedDataInput) {\n            encryptedDataInput.value = encryptedDataPayload;\n            if (isVerbose) {\n            console.log(\"Set encryptedDataPayload value in input field:\", encryptedDataInput.value);\n            }\n        } else {\n            console.error(\"Failed to set encryptedDataPayload. Input field missing.\");\n        }\n    } else {\n        console.error(\"Failed to find script tag with 'data-payload' attribute.\");\n    }\n}\n\n// Function to retrieve and set the encryptedDataId\nfunction setEncryptedDataId() {\n\n    if (isVerbose) {\n    console.log(\"setEncryptedDataId function called\");\n    }\n\n    // Find the script tag with the 'data-id' attribute\n    const scriptTag = document.querySelector('script[data-id]');\n    \n    if (scriptTag) {\n        const encryptedDataId = scriptTag.getAttribute('data-id');\n\n        if (isVerbose) {\n        console.log(\"Encrypted Data ID from script tag:\", encryptedDataId); //im not seeing this log \n        }\n        // Assuming you have an input or a hidden field in your HTML to store the encryptedDataId\n        const encryptedDataIdInput = document.getElementById('encryptedDataId');\n        if (encryptedDataIdInput) {\n            encryptedDataIdInput.value = encryptedDataId;\n\n            if (isVerbose) {\n            console.log(\"Set encryptedDataId value in input field:\", encryptedDataIdInput.value);\n            }\n\n        } else {\n            console.error(\"Failed to set encryptedDataId. Input field missing.\");\n        }\n    } else {\n        console.error(\"Failed to find script tag with 'data-id' attribute.\");\n    } //no console log is showing in this function\n}\n\n// Function to activate the chatbot\nfunction activateChatbot() {\n\n    if (isVerbose) {\n    console.log(\"Starting chatbot activation process.\");\n    }\n\n    const encryptedDataPayload = document.getElementById('encryptedDataPayload').value;\n    const encryptedDataId = document.getElementById('encryptedDataId').value; // Make sure this variable is correctly capturing the value\n    const clientHostname = window.location.hostname;\n    //const clientHostname = \"localhost\";\n\n    // Debugging: Log the values before sending\n    if (isVerbose) {\n    console.log(\"encryptedDataPayload:\", encryptedDataPayload);\n    console.log(\"encryptedDataId:\", encryptedDataId);\n    console.log(\"clientHostname:\", clientHostname);\n    }\n\n    // Construct the request body\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname\n    });\n\n    // Debugging: Log the request body\n    if (isVerbose) {\n    console.log(\"Sending request body:\", requestBody);\n    }\n\n    fetch('https://next.leads-mania.com/webchat/activate-chatbot', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: requestBody\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (isVerbose) {\n        console.log('Chatbot activated:', data);\n        }\n        if (data.success) {\n            localStorage.setItem('isActivated', 'true');\n            if (isVerbose) {\n            console.log(\"Updated activation status in localStorage after successful activation.\");\n            }\n        }\n    })\n    .catch(error => console.error('Error activating chatbot:', error));\n}\n\n\n// Function to initialize chatbot (fetch configuration, check activation)\nasync function initializeChatbot() {\n    await fetchAndUpdateChatConfig(); // Fetch and update chat configuration\n    setEncryptedDataId(); // Set encrypted data ID\n    checkActivationStatus();  // Check activation status\n}\n\n\n// Function to get or create a new user session ID\nfunction getSessionId() {\n    let sessionId = sessionStorage.getItem('sessionId');\n    if (!sessionId) {\n        sessionId = uuid.v4(); // Generate a new UUID\n        sessionStorage.setItem('sessionId', sessionId);\n    }\n    return sessionId;\n}\n\n// Function to create a thread\nfunction createThread() {\n    const encryptedDataPayload = document.getElementById('encryptedDataPayload').value;\n    const encryptedDataId = document.getElementById('encryptedDataId').value;\n    const clientHostname = window.location.hostname;\n    //const clientHostname = \"localhost\";\n    const userId = getSessionId(); // Get the current session ID or generate a new one\n\n    // Construct the request body\n    const requestBody = JSON.stringify({\n        userId,\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname\n    });\n\n    // Debugging: Log the request body\n    if (isVerbose) {\n    console.log(\"Sending request createThread:\", requestBody);\n    }\n\n    fetch('https://next.leads-mania.com/webchat/create-thread', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: requestBody\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success && data.data && data.data.threadID) {\n            // Store the thread ID in sessionStorage\n            sessionStorage.setItem('threadId', data.data.threadID);\n        }\n        if (isVerbose) {\n        console.log('Thread created:', data);\n        }\n    })\n    .catch(error => console.error('Error creating thread:', error));\n}\n\n// Function to create a message\nasync function createMessage(encryptedDataPayload, encryptedDataId, clientHostname, threadId, lastUtterance) {\n    if (isVerbose) {\n    console.log(\"createMessage - Sending request with:\", { encryptedDataPayload, encryptedDataId, clientHostname, threadId, lastUtterance });\n    }\n\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname,\n        threadId,\n        lastUtterance\n    });\n    \n    if (isVerbose) {\n    console.log(\"Sending request body for createMessage:\", requestBody);\n    }\n\n    const response = await fetch('https://next.leads-mania.com/webchat/create-message', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: requestBody\n    });\n    const data = await response.json();\n\n    if (isVerbose) {\n    console.log(\"createMessage - Response received:\", data);\n    }\n\n    if (!response.ok) {\n        throw new Error(data.message || 'Failed to create message');\n    }\n    return data;\n}\n\n\n// Function to create a run\nasync function createRun(encryptedDataPayload, encryptedDataId, clientHostname, threadId) {\n\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname,\n        threadId\n    });\n    \n    if (isVerbose) {\n    console.log(\"Sending request body for createRun:\", requestBody);\n    }\n\n    try {\n        const response = await fetch('https://next.leads-mania.com/webchat/create-run', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: requestBody\n        });\n\n        const data = await response.json();\n        if (response.ok && data.success) {\n            if (isVerbose) {\n            console.log('Run created:', data);\n            }\n            const runId = data.data.runID; // Accessing the runID correctly\n            sessionStorage.setItem('runId', runId);\n            return runId;\n        } else {\n            console.error('Failed to create run:', data.message);\n            return null;\n        }\n    } catch (error) {\n        console.error('Error creating run:', error);\n        return null;\n    }\n}\n\n// Function to poll the status of a run\nasync function pollRunStatus(encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId) {\n    \n    if (isVerbose) {\n    console.log(\"pollRunStatus - Sending request with:\", { encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId });\n    }\n\n    // Construct the request body\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname,\n        threadId: threadId,\n        runId: runId\n    });\n\n    if (isVerbose) {\n    console.log(\"Sending request body for pollRunStatus:\", requestBody);\n    }\n\n    try {\n        const response = await fetch('https://next.leads-mania.com/webchat/poll-status', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: requestBody\n        });\n\n        const data = await response.json();\n        if (isVerbose) {\n        console.log(\"pollRunStatus - Response received:\", data);\n        }\n\n        if (!response.ok) {\n            throw new Error(data.message || 'Failed to poll run status.');\n        }\n\n        // Check if data contains status and return it\n        if (data.success && data.data && data.data.status) {\n            if (isVerbose) {\n            console.log('Run status:', data.data.status);\n            }\n            return data.data.status; // Return the status of the run\n        } else {\n            console.error('Failed to poll run status:', data.message);\n            return null;\n        }\n    } catch (error) {\n        console.error('Error polling run status:', error);\n        return null; // Return null in case of an error\n    }\n}\n\n\n// Function to return the response from the assistant\nasync function getAssistantResponse(encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId) {\n    \n    if (isVerbose) {\n    console.log('getAssistantResponse called with:', { encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId });\n    }\n\n    // Construct the request body\n    const requestBody = JSON.stringify({\n        dataPayload: encryptedDataPayload,\n        dataId: encryptedDataId,\n        hostname: clientHostname,\n        threadId: threadId,\n        runId: runId\n    });\n\n    if (isVerbose) {\n    console.log(\"Sending request body for getAssistantResponse:\", requestBody);\n    }\n\n    try {\n        const response = await fetch('https://next.leads-mania.com/webchat/get-assistant-response', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: requestBody\n        });\n\n        const data = await response.json();\n\n        if (isVerbose) {\n        console.log('getAssistantResponse - Response data:', data);\n        }\n\n        if (!response.ok) {\n            throw new Error(data.message || 'Failed to get assistant response.');\n        }\n\n        // Correctly extract the assistant's reply\n        const assistantReply = data.data.assistantReply;\n        if (isVerbose) {\n        console.log('getAssistantResponse - Assistant reply:', assistantReply);\n        }\n\n        return assistantReply; // Return the assistant's response\n    } catch (error) {\n        console.error('Error getting assistant response:', error);\n        return null; // Return null in case of an error\n    }\n}\n\n\n// Function to fetch and update chat configuration\nasync function fetchAndUpdateChatConfig() {\n    const encryptedDataPayload = document.getElementById('encryptedDataPayload').value;\n    const sessionStorageKey = `chatConfig-${encryptedDataPayload}`;\n\n    if (!sessionStorage.getItem(sessionStorageKey)) {\n        if (isVerbose) {\n        console.log('Fetching chat configuration from server.');\n        }\n        const response = await fetch('https://next.leads-mania.com/webchat/get-chat-config', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ dataPayload: encryptedDataPayload })\n        });\n        const chatConfig = await response.json();\n\n        if (response.ok) {\n            sessionStorage.setItem(sessionStorageKey, JSON.stringify(chatConfig));\n            updateChatUI(chatConfig);\n        } else {\n            console.error('Failed to fetch chat configuration:', chatConfig.message);\n        }\n    } else {\n        if (isVerbose) {\n        console.log('Using stored chat configuration from sessionStorage.');\n        }\n        const chatConfig = JSON.parse(sessionStorage.getItem(sessionStorageKey));\n        updateChatUI(chatConfig);\n    }\n}\n\n// Function to open the lightbox modal\nfunction openLightboxModal(src) {\n    // console.log(\"Opening lightbox modal with image:\", src);\n    const modal = document.querySelector(\".x1z2Chat-lightbox-modal\");\n    const modalImg = modal.querySelector(\".x1z2Chat-lightbox-content\");\n\n    modalImg.src = src;\n    modal.style.display = \"block\";\n\n    // Close modal when clicking on the close button or anywhere outside the image\n    modal.addEventListener('click', function(event) {\n        if (event.target === modal || event.target.className === \"x1z2Chat-close-lightbox\") {\n            if (isVerbose) {\n            console.log(\"Closing lightbox modal.\");\n            }\n            modal.style.display = \"none\";\n        }\n    });\n}\n\n// Function to handle chatbot toggle\nfunction toggleChatbot() {\n    document.body.classList.toggle(\"x1z2Chat-show-chatbot\");\n    \n    // Create a thread only if no thread exists and the chatbot is being opened\n    if (!sessionStorage.getItem('threadId') && document.body.classList.contains(\"x1z2Chat-show-chatbot\")) {\n        createThread();\n    }\n\n    // Send the initial greeting if it hasn't been sent yet\n    if (!document.querySelector(\".x1z2Chat-chatbox .incoming\") && chatbotGreeting) {\n        setTimeout(() => {\n            addMessageToChat(chatbotGreeting, \"incoming\", false, chatbotAvatarImage);\n        }, 1000);\n    }\n}\n\nfunction convertMarkdownToHtml(markdownText) {\n    // Convert bold text\n    const boldPattern = /\\*\\*(.*?)\\*\\*/g;\n    let htmlText = markdownText.replace(boldPattern, '<strong>$1</strong>');\n\n    // Convert image links (Markdown syntax)\n    const imagePattern = /!\\[(.*?)\\]\\((https?:\\/\\/\\S+(?:jpg|jpeg|png|gif|bmp))\\)/gi;\n    htmlText = htmlText.replace(imagePattern, '<a href=\"$2\" class=\"x1z2Chat-image-link\" target=\"_blank\"><img src=\"$2\" alt=\"$1\" class=\"thumbnail\"></a>');\n\n    // Convert regular links (Markdown syntax)\n    const linkPattern = /\\[(.*?)\\]\\((https?:\\/\\/\\S+)\\)/gi;\n    htmlText = htmlText.replace(linkPattern, '<a href=\"$2\" target=\"_blank\">$1</a>');\n\n    return htmlText;\n}\n\n// Function to show typing indicator in chat\nfunction showTypingIndicator() {\n    // console.log(\"Showing typing indicator...\");\n    const typingIndicator = document.createElement(\"div\");\n    typingIndicator.classList.add(\"x1z2Chat-typing\");\n\n    // Create three span elements for the dots\n    for (let i = 0; i < 3; i++) {\n        const dot = document.createElement(\"span\");\n        typingIndicator.appendChild(dot);\n    }\n\n    chatbox.appendChild(typingIndicator);\n    chatbox.scrollTo(0, chatbox.scrollHeight);\n}\n\n// Function to remove the typing indicator\nfunction removeTypingIndicator() {\n    // console.log(\"Removing typing indicator...\");\n    const typingIndicator = document.querySelector(\".x1z2Chat-typing\");\n    if (typingIndicator) {\n        typingIndicator.remove();\n    }\n}\n\n// Function to add messages to chat\nconst addMessageToChat = (message, className, isHtml = false, isTypingIndicator = false, avatarImageUrl = chatbotAvatarImage) => {\n    const chatLi = document.createElement(\"li\");\n    chatLi.classList.add(\"x1z2Chat-chat\", className);\n\n    const chatBubble = document.createElement(\"p\");\n    // chatBubble.classList.add(\"x1z2Chat-chat-bubble\");\n\n    let convertedMessage = isHtml ? message : convertMarkdownToHtml(message);\n    chatBubble.innerHTML = convertedMessage;\n\n    if (className === \"incoming\") {\n        // For incoming messages, include the avatar image\n        const avatarImg = document.createElement(\"img\");\n        avatarImg.src = avatarImageUrl;\n        avatarImg.classList.add(\"x1z2Chat-assistant-avatar\");\n        chatLi.appendChild(avatarImg);\n    }\n\n    chatLi.appendChild(chatBubble);\n    chatbox.appendChild(chatLi);\n    chatbox.scrollTo(0, chatbox.scrollHeight);\n};\n\n\n// Function to update UI with chat configuration data\nfunction updateChatUI(chatConfig) {\n    chatbotGreeting = chatConfig.greeting_message;\n    if (isVerbose) {\n    console.log(\"Updating chat UI with configuration:\", chatConfig);\n    }\n\n    // Update the primary color\n    if (chatConfig.colorTheme) {\n        document.documentElement.style.setProperty('--primary-color', chatConfig.colorTheme);\n    }\n    \n    document.querySelector('.x1z2Chat-chatbot-logo').src = chatConfig.company_image;\n    document.querySelector('.x1z2Chat-chatbot-heading-text').textContent = chatConfig.heading_text;\n    document.querySelector('.x1z2Chat-online-status').textContent = chatConfig.subheading_text;\n    chatbotAvatarImage = chatConfig.avatar_image;\n    document.querySelector('.x1z2Chat-popup-assistant-avatar').src = chatConfig.popup_image;\n    document.querySelector('.x1z2Chat-popup-message').textContent = chatConfig.popup_message;\n    \n    // Store activation status\n    localStorage.setItem('isActivated', chatConfig.is_activated);\n    if (isVerbose) {\n    console.log(\"Stored activation status:\", chatConfig.is_activated);\n    }\n\n}\n\n// Function to check activation status\nfunction checkActivationStatus() {\n    const isActivated = localStorage.getItem('isActivated');\n    console.log(\"Checking activation status:\", isActivated);\n    \n    // Convert the retrieved value to a boolean for accurate comparison\n    const isActivatedBool = isActivated === '1';\n\n    if (!isActivatedBool) {\n        console.log(\"Activating chat as it is not yet activated.\");\n        // Activation has not been done or is not marked as activated\n        activateChatbot();\n    } else {\n        console.log(\"Chat is already activated.\");\n    }\n}\n\n\n// Process the user message by creating a run, polling the status, and getting the response\nasync function processUserMessage(message) {\n    if (isVerbose) {\n    console.log(\"processUserMessage - Received message:\", message);\n    }\n    try {\n        // Retrieve encrypted data and hostname from the DOM elements\n        const encryptedDataPayload = document.getElementById('encryptedDataPayload').value;\n        const encryptedDataId = document.getElementById('encryptedDataId').value;\n        const clientHostname = document.location.hostname; // Dynamically get the hostname\n        // const clientHostname = \"localhost\"; // Dynamically get the hostname\n        const threadId = sessionStorage.getItem('threadId'); // Assuming threadId is stored in sessionStorage\n\n        // Step 1: Create a message\n        if (isVerbose) {\n        console.log(\"processUserMessage - Creating message with:\", message);\n        }\n        await createMessage(encryptedDataPayload, encryptedDataId, clientHostname, threadId, message); // Adjust parameters as per the latest function signature\n\n        // Step 2: Create a run\n        if (isVerbose) {\n        console.log(\"processUserMessage - Creating run.\");\n        }\n        const runId = await createRun(encryptedDataPayload, encryptedDataId, clientHostname, threadId); // Adjust parameters as per the latest function signature\n        if (isVerbose) {\n        console.log(\"processUserMessage - Run created with ID:\", runId);\n        }\n\n        // Step 3: Poll for the status of the run\n        let runStatus;\n        do {\n            runStatus = await pollRunStatus(encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId); // Adjust parameters as per the latest function signature\n            if (isVerbose) {\n            console.log(\"Polling run status:\", runStatus);\n            }\n            await new Promise(resolve => setTimeout(resolve, 2000)); // Wait for 2 seconds before polling again\n        } while (runStatus !== 'completed');\n\n        // Step 4: Get the assistant's response\n        if (isVerbose) {\n        console.log(\"processUserMessage - Getting assistant's response.\");\n        }\n        const assistantResponse = await getAssistantResponse(encryptedDataPayload, encryptedDataId, clientHostname, threadId, runId); // Adjust parameters as per the latest function signature\n\n        // Display the assistant's response\n        if (assistantResponse) {\n            addMessageToChat(assistantResponse, \"incoming\");\n            removeTypingIndicator(); // Remove typing indicator as soon as the response is displayed\n            if (isVerbose) {\n            console.log(\"processUserMessage - Assistant response:\", assistantResponse);\n            }\n        }\n    } catch (error) {\n        console.error('Error processing user message:', error);\n    }\n}\n\n\n// Handle chat function\nconst handleChat = async (message) => {\n    if (!message) {\n        if (isVerbose) {\n        console.log(\"handleChat - No message entered. Exiting.\");\n        }\n        return;\n    }\n\n    // Add the user message to the chat as an outgoing message\n    addMessageToChat(message, \"outgoing\");\n    if (isVerbose) {\n    console.log(\"handleChat - Message added to chat:\", message);\n    }\n\n    // Clear the chat input field\n    chatInput.value = \"\";\n    if (isVerbose) {\n    console.log(\"handleChat - Chat input cleared\");\n    }\n\n    // Generate a random initial delay for showing the typing indicator\n    const initialTypingDelay = getRandomDelay(4000, 5000);\n\n    setTimeout(async () => {\n        // Show typing indicator after the initialTypingDelay\n        showTypingIndicator();\n        if (isVerbose) {\n        console.log(\"handleChat - Showing typing indicator.\");\n        }\n\n        // Retrieve necessary data\n        const encryptedDataPayload = document.getElementById('encryptedDataPayload').value;\n        const threadId = sessionStorage.getItem('threadId');\n        if (isVerbose) {\n        console.log(\"handleChat - encryptedDataPayload and threadId:\", encryptedDataPayload, threadId);\n        }\n\n        try {\n            // Process the user message\n            if (isVerbose) {\n            console.log(\"handleChat - Calling processUserMessage with:\", message);\n            }\n            await processUserMessage(message, encryptedDataPayload, threadId);\n        } catch (error) {\n            console.error(\"Error processing user message:\", error);\n        }\n\n        // The typing indicator will be removed inside processUserMessage after receiving the assistant's response\n    }, initialTypingDelay);\n};\n\nfunction setupEventListeners() {\n    chatbotToggler.addEventListener(\"click\", toggleChatbot);\n    sendChatBtn.addEventListener(\"click\", () => { handleChat(chatInput.value.trim()); });\n\n    chatInput.addEventListener(\"keypress\", function(event) {\n        if (event.key === \"Enter\" && !event.shiftKey) {\n            event.preventDefault(); // Prevent the default action (i.e., inserting a newline)\n            handleChat(chatInput.value.trim()); // Call the handleChat function with the trimmed message\n        }\n    });\n    // Event listener for thumbnails\n    chatbox.addEventListener('click', function(event) {\n        if (event.target.classList.contains('x1z2Chat-image-link') || event.target.classList.contains('thumbnail')) {\n            event.preventDefault();\n            let imgSrc = event.target.href || event.target.src;\n            openLightboxModal(imgSrc);\n        }\n    });    \n    // Add event listeners to other queried DOM elements as needed\n}\n\nif (isVerbose) {\nconsole.log(\"Script loaded\");\n}\n\nfunction onDomContentLoaded() {\n    if (isVerbose) {\n    console.log(\"DOMContentLoaded event triggered or DOM already loaded\");\n    }\n\n    // Get references to the chat popup, close button, and chatbot toggler\n    var chatPopup = document.getElementById('chat-popup');\n    var closeButton = document.querySelector('.x1z2Chat-close-popup');\n    var chatbotToggler = document.querySelector('.x1z2Chat-chatbot-toggler');\n\n    if (isVerbose) {\n    console.log(\"chatPopup:\", chatPopup);\n    console.log(\"closeButton:\", closeButton);\n    console.log(\"chatbotToggler:\", chatbotToggler);\n    }\n\n    // Variable to track if the user has scrolled past a certain point\n    var hasScrolled = false;\n\n    // Add scroll event listener\n    window.addEventListener('scroll', function() {\n        if (isVerbose) {\n        console.log(\"Scroll event triggered, pageYOffset:\", window.pageYOffset);\n        }\n        if (window.pageYOffset > 300 && !hasScrolled) {\n            if (isVerbose) {\n            console.log(\"User scrolled more than 300px, showing popup\");\n            }\n            hasScrolled = true;\n            setTimeout(function() {\n                if (!sessionStorage.getItem('popupClosed')) {\n                    if (isVerbose) {\n                    console.log(\"Showing popup\");\n                    }\n                    chatPopup.style.opacity = 1;\n                    chatPopup.style.visibility = 'visible';\n                } else {\n                    if (isVerbose) {\n                    console.log(\"Popup previously closed, not showing\");\n                    }\n                }\n            }, 4000);\n        }\n    });\n\n    // Add click event listener to the close button\n    if (closeButton) {\n        if (isVerbose) {\n        console.log(\"Adding click listener to closeButton\");\n        }\n        closeButton.addEventListener('click', closePopup);\n    } else {\n        if (isVerbose) {\n        console.log(\"closeButton not found\");\n        }\n    }\n\n    // Add click event listener to the chatbot toggler\n    if (chatbotToggler) {\n        if (isVerbose) {\n        console.log(\"Adding click listener to chatbotToggler\");\n        }\n        chatbotToggler.addEventListener('click', closePopup);\n    } else {\n        if (isVerbose) {\n        console.log(\"chatbotToggler not found\");\n        }\n    }\n\n    // Add click event listener to the chat popup\n    if (chatPopup) {\n        chatPopup.addEventListener('click', function() {\n            if (isVerbose) {\n            console.log(\"Chat popup clicked, toggling chatbot\");\n            }\n            toggleChatbot();\n            // Optionally, close the popup when the chatbot is opened\n            closePopup();\n        });\n    } else {\n        if (isVerbose) {\n        console.log(\"chatPopup not found\");\n        }\n    }\n\n    // Function to close the popup\n    function closePopup() {\n        if (isVerbose) {\n        console.log(\"Closing popup\");\n        }\n        chatPopup.style.opacity = 0;\n        chatPopup.style.visibility = 'hidden';\n        sessionStorage.setItem('popupClosed', 'true');\n    }\n}\n\nif (document.readyState === \"loading\") {\n    document.addEventListener('DOMContentLoaded', onDomContentLoaded);\n} else {\n    onDomContentLoaded();\n}\n\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$e92b8c976482afe3$var$chatbox","$e92b8c976482afe3$var$chatbotAvatarImage","$e92b8c976482afe3$var$chatbotGreeting","$e92b8c976482afe3$var$addMessageToChat","message","className","isHtml","isTypingIndicator","avatarImageUrl","htmlText","chatLi","document","createElement","classList","add","chatBubble","convertedMessage","markdownText","replace","innerHTML","avatarImg","src","appendChild","scrollTo","scrollHeight","$e92b8c976482afe3$var$onDomContentLoaded","chatPopup","getElementById","closeButton","querySelector","chatbotToggler","hasScrolled","closePopup","style","opacity","visibility","sessionStorage","setItem","window","addEventListener","pageYOffset","setTimeout","getItem","body","toggle","contains","$e92b8c976482afe3$var$createThread","sessionId","encryptedDataPayload","value","encryptedDataId","clientHostname","location","hostname","fetch","method","headers","JSON","stringify","userId","uuid","v4","dataPayload","dataId","then","response","json","data","success","threadID","catch","error","console","readyState"],"version":3,"file":"webchat.8333e173.js.map"}